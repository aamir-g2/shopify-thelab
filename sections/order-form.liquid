{% comment %}
Order Form Section
- Lists products from a chosen collection
- Lets user enter # of boxes
- Calculates total units & subtotal
- Adds multiple lines to cart via /cart/add.js
{% endcomment %}

<section id="order-form-{{ section.id }}" class="order-form" style="--of-pad-block: {{ section.settings.pad_block }}px;">
  <div class="page-width order-form__inner">
    {% if section.settings.heading != blank %}
      <h2 class="order-form__heading">{{ section.settings.heading }}</h2>
    {% endif %}

    {% assign order_collection = collections[section.settings.collection] %}

    {% if order_collection and order_collection.products_count > 0 %}
      <div class="order-form__table-wrap">
        <table class="order-form__table">
          <thead>
            <tr>
              <th class="of-left">Product</th>
              <!-- Variant removed -->
              <th>Units/box</th>
              <th>Cost</th>
              <th>RSP</th>
              <th># Boxes</th>
              <th>Total units</th>
              <th>Subtotal</th>
              <!-- Margin removed -->
            </tr>
          </thead>
          <tbody>
            {% for product in order_collection.products %}
              {% for variant in product.variants %}

                {% assign units_per_box = variant.metafields.packaging.units_per_box.value 
                  | default: product.metafields.packaging.units_per_box.value 
                  | default: 1 %}

                {%- comment -%} cost & rsp normalized to cents {%- endcomment -%}
                {% if variant.metafields.pricing.cost_price.value %}
                  {% assign cost_price_cents = variant.metafields.pricing.cost_price.value | round %}
                {% elsif product.metafields.pricing.cost_price.value %}
                  {% assign cost_price_cents = product.metafields.pricing.cost_price.value | round %}
                {% else %}
                  {% assign cost_price_cents = 0 %}
                {% endif %}

                {% if variant.metafields.pricing.rsp.value %}
                  {% assign rsp_cents = variant.metafields.pricing.rsp.value | times: 100 | round %}
                {% elsif product.metafields.pricing.rsp.value %}
                  {% assign rsp_cents = product.metafields.pricing.rsp.value | times: 100 | round %}
                {% else %}
                  {% assign rsp_cents = variant.price %}
                {% endif %}

                <tr class="order-row"
                  data-variant-id="{{ variant.id }}"
                  data-units-per-box="{{ units_per_box }}"
                  data-cost-price="{{ cost_price_cents | divided_by: 100.0 }}"
                  data-rsp="{{ rsp_cents | divided_by: 100.0 }}">
                  <td class="of-left">
                    <div class="of-product">
                      {% if product.featured_image %}
                        <img src="{{ product.featured_image | image_url: width: 64 }}" alt="{{ product.title | escape }}" width="48" height="48" loading="lazy">
                      {% endif %}
                      <a href="{{ product.url }}" class="of-link">{{ product.title }}</a>
                    </div>
                  </td>

                  <!-- Variant column removed -->

                  <td class="units-per-box">{{ units_per_box }}</td>
                  <td class="cost-price">{{ cost_price_cents | money }}</td>
                  <td class="rsp-price">{{ rsp_cents | money }}</td>

                  <td>
                    <input class="box-input" type="number" min="0" step="1" inputmode="numeric" aria-label="Boxes for {{ product.title }}" />
                  </td>
                  <td class="total-units">0</td>
                  <td class="subtotal">{{ 0 | money }}</td>

                  <!-- Margin cell removed -->
                </tr>
              {% endfor %}
            {% endfor %}
          </tbody>

          <tfoot>
            <tr>
              <th class="of-left" colspan="5">Order total:</th>
              <th id="of-total-units">0</th>
              <th id="of-grand-subtotal">{{ 0 | money }}</th>
            </tr>
          </tfoot>
        </table>
      </div>

      <div class="order-form__actions">
        <button type="button" class="of-btn of-btn--primary" id="of-add-to-cart">Add selected to cart</button>
        <button type="button" class="of-btn of-btn--ghost" id="of-clear">Clear</button>
      </div>
    {% else %}
      <p class="of-empty">No products found. Choose a collection with active products.</p>
    {% endif %}
  </div>

  <style>
    /* --- layout --- */
    #order-form-{{ section.id }} { padding-block: var(--of-pad-block, 40px); }
    .order-form__inner { max-width: var(--page-width, 1200px); margin-inline: auto; }
    .order-form__heading { margin: 0 0 1rem 0; font-size: clamp(1.25rem, 1rem + 1vw, 1.75rem); }

    /* --- table --- */
    .order-form__table-wrap { overflow-x: auto; }
    .order-form__table { width: 100%; border-collapse: collapse; font-size: .95rem; }
    .order-form__table thead th {
      position: sticky; top: 0;
      background: var(--color-background, #fff);
      z-index: 1;
      text-align: center; padding: .8rem .75rem; border-bottom: 1px solid rgba(0,0,0,.08);
      font-weight: 600; letter-spacing: .02em;
    }
    .order-form__table th.of-left, .order-form__table td.of-left { text-align: left; }
    .order-form__table tbody td { padding: .75rem .75rem; text-align: center; border-bottom: 1px solid rgba(0,0,0,.06); }
    .order-form__table tbody tr:nth-child(odd) { background: color-mix(in oklab, currentColor 3%, transparent); }
    .order-form__table tfoot th { padding: .9rem .75rem; text-align: right; border-top: 2px solid rgba(0,0,0,.12); }
    .order-form__table tfoot th#of-total-units,
    .order-form__table tfoot th#of-grand-subtotal { text-align: center; }

    /* product cell */
    .of-product { display: inline-flex; align-items: center; gap: .6rem; }
    .of-product img { width: 40px; height: 40px; object-fit: cover; border-radius: 8px; }
    .of-link { text-decoration: none; border-bottom: 1px solid transparent; }
    .of-link:hover { border-color: currentColor; }

    /* inputs */
    .box-input {
      width: 5.25rem; padding: .45rem .5rem; border-radius: 8px;
      border: 1px solid rgba(0,0,0,.15); background: var(--color-background, #fff);
    }

    /* buttons */
    .order-form__actions { margin-top: 1rem; display: flex; gap: .75rem; }
    .of-btn {
      display: inline-flex; align-items: center; justify-content: center;
      padding: .65rem 1rem; border-radius: 999px; font-weight: 600;
      border: 1px solid transparent; cursor: pointer;
      transition: transform .06s ease, box-shadow .2s ease, background .2s ease;
    }
    .of-btn:active { transform: translateY(1px); }
    .of-btn--primary {
      background: var(--color-button, #111); color: var(--color-button-text, #fff);
      box-shadow: 0 2px 8px rgba(0,0,0,.08);
    }
    .of-btn--primary:hover { filter: brightness(1.05); }
    .of-btn--ghost {
      background: transparent; color: currentColor;
      border-color: rgba(0,0,0,.2);
    }
    .of-btn--ghost:hover { background: color-mix(in oklab, currentColor 8%, transparent); }
    .of-btn:disabled { opacity: .5; cursor: not-allowed; }
    .of-empty { opacity: .7; }
  </style>

  <script>
    document.addEventListener('DOMContentLoaded', function() {
      const section = document.getElementById('order-form-{{ section.id }}');
      if (!section) return;

      // Money formatter (ZAR)
      function formatMoney(amount) {
        try {
          return new Intl.NumberFormat('en-ZA', { style: 'currency', currency: 'ZAR' })
            .format(Number(amount || 0));
        } catch {
          return 'R ' + (Number(amount || 0)).toFixed(2);
        }
      }

      const rows = Array.from(section.querySelectorAll('.order-row'));
      const addBtn = section.querySelector('#of-add-to-cart');
      const clearBtn = section.querySelector('#of-clear');
      const totalUnitsCell = section.querySelector('#of-total-units');
      const grandSubtotalCell = section.querySelector('#of-grand-subtotal');

      function recalcRow(row) {
        const boxes = Number(row.querySelector('.box-input').value || 0);
        const unitsPerBox = Number(row.dataset.unitsPerBox || 1);
        const costPrice = Number(row.dataset.costPrice || 0); // rands

        const totalUnits = boxes * unitsPerBox;
        const subtotal = totalUnits * costPrice / 100;

        row.querySelector('.total-units').textContent = totalUnits;
        row.querySelector('.subtotal').textContent = formatMoney(subtotal);

        return { totalUnits, subtotal };
      }

      function recalcTotals() {
        let totalUnits = 0;
        let grandSubtotal = 0;
        rows.forEach(row => {
          const { totalUnits: u, subtotal: s } = recalcRow(row);
          totalUnits += u;
          grandSubtotal += s;
        });
        totalUnitsCell.textContent = totalUnits;
        grandSubtotalCell.textContent = formatMoney(grandSubtotal);
        addBtn.disabled = totalUnits === 0;
      }

      rows.forEach(row => {
        const input = row.querySelector('.box-input');
        input.addEventListener('input', recalcTotals, { passive: true });
      });

      clearBtn?.addEventListener('click', () => {
        rows.forEach(row => row.querySelector('.box-input').value = '');
        recalcTotals();
      });

      addBtn?.addEventListener('click', async () => {
        const items = [];
        rows.forEach(row => {
            const boxes = Number(row.querySelector('.box-input').value || 0);
            if (boxes > 0) {
            const unitsPerBox = Number(row.dataset.unitsPerBox || 1);
            const variantId = Number(row.dataset.variantId);
            const quantity = boxes * unitsPerBox;
            if (quantity > 0) items.push({ id: variantId, quantity });
            }
        });
        if (!items.length) return;

        addBtn.disabled = true;

        // 1) Try bulk add
        try {
            const res = await fetch('/cart/add.js', {
            method: 'POST',
            headers: { 'Content-Type': 'application/json', 'Accept': 'application/json' },
            body: JSON.stringify({ items })
            });

            if (!res.ok) {
            const err = await res.json().catch(() => ({}));
            throw new Error(err?.description || err?.message || 'Cart add failed');
            }

            // Success → go to cart (or open your drawer)
            window.location.href = '/cart';
            return;
        } catch (e) {
            console.warn('Bulk add failed:', e?.message);
            // 2) Fallback: add items one-by-one to identify the failing line
            try {
            for (const it of items) {
                const r = await fetch('/cart/add.js', {
                method: 'POST',
                headers: { 'Content-Type': 'application/json', 'Accept': 'application/json' },
                body: JSON.stringify(it) // single item form
                });
                if (!r.ok) {
                const je = await r.json().catch(() => ({}));
                throw new Error(je?.description || je?.message || `Failed on variant ${it.id}`);
                }
            }
            window.location.href = '/cart';
            return;
            } catch (e2) {
            alert(`Sorry, couldn't add item(s): ${e2.message}`);
            } finally {
            addBtn.disabled = false;
            }
        }
        });


      recalcTotals();
    });
  </script>
</section>

{% schema %}
{
  "name": "Order form",
  "settings": [
    { "type": "text", "id": "heading", "label": "Heading", "default": "Order Form" },
    { "type": "collection", "id": "collection", "label": "Collection to show" },
    { "type": "range", "id": "pad_block", "min": 0, "max": 80, "step": 4, "unit": "px", "label": "Top/bottom padding", "default": 40 }
  ],
  "presets": [{ "name": "Order form" }]
}
{% endschema %}

