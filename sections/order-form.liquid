{% comment %}
Order Form Section
- Lists variants from one or more collections
- Uses metafields:
  - packaging.units_per_box (variant or product)
  - pricing.cost_price (variant or product)
  - pricing.rsp (variant or product)
- Computes totals and margin client-side
- Adds lines via AJAX items array
{% endcomment %}

<section class="order-form container">
  <h2>{{ section.settings.heading | escape }}</h2>

  <div class="order-form__tables">
    {% for block in section.blocks %}
      {% assign coll = block.settings.collection %}
      {% if coll != blank %}
        <h3 class="order-form__collection-title">{{ coll.title }}</h3>

        <div class="order-form__table-wrapper">
          <table class="order-form__table" data-collection-handle="{{ coll.handle }}">
            <thead>
              <tr>
                <th>Product</th>
                <th>Variant</th>
                <th class="text-right">Units / Box</th>
                <th class="text-right">Cost (R)</th>
                <th class="text-right">RSP (R)</th>
                <th class="text-right"># Boxes</th>
                <th class="text-right">Total Units</th>
                <th class="text-right">Sub-Total (R)</th>
                <th class="text-right">Margin %</th>
              </tr>
            </thead>
            <tbody>
              {% paginate coll.products by 1000 %}
                {% for product in coll.products %}
                  {% for variant in product.variants %}
                    {% liquid
                      assign v_units = variant.metafields.packaging.units_per_box | default: product.metafields.packaging.units_per_box
                      assign v_cost  = variant.metafields.pricing.cost_price | default: product.metafields.pricing.cost_price
                      assign v_rsp   = variant.metafields.pricing.rsp | default: product.metafields.pricing.rsp
                    %}
                    {% if v_units and v_cost and v_rsp %}
                      <tr class="order-row"
                        data-variant-id="{{ variant.id }}"
                        data-units-per-box="{{ v_units }}"
                        data-cost="{{ v_cost | money_without_currency | replace: ',', '' }}"
                        data-rsp="{{ v_rsp | money_without_currency | replace: ',', '' }}"
                      >
                        <td>
                          <a href="{{ product.url }}" target="_blank" rel="noopener">{{ product.title }}</a>
                        </td>
                        <td>{{ variant.title }}</td>
                        <td class="text-right">{{ v_units }}</td>
                        <td class="text-right">{{ v_cost | money }}</td>
                        <td class="text-right">{{ v_rsp  | money }}</td>
                        <td class="text-right">
                          <input class="boxes-input" type="number" min="0" step="1" value="0" inputmode="numeric" pattern="[0-9]*" aria-label="Boxes for {{ product.title }} â€“ {{ variant.title }}">
                        </td>
                        <td class="text-right total-units">0</td>
                        <td class="text-right sub-total">{{ 0 | money }}</td>
                        <td class="text-right margin-pct">0%</td>
                      </tr>
                    {% endif %}
                  {% endfor %}
                {% endfor %}
              {% endpaginate %}
            </tbody>
          </table>
        </div>
      {% endif %}
    {% endfor %}
  </div>

  <div class="order-form__footer">
    <button type="button" class="order-form__add btn">
      Add Selected to Cart
    </button>
    <div class="order-form__notice" aria-live="polite"></div>
  </div>

  <style>
    .order-form.container{max-width:1200px;margin:0 auto;padding:var(--spacing, 1.5rem)}
    .order-form__table{width:100%;border-collapse:collapse}
    .order-form__table th,.order-form__table td{padding:.6rem;border-bottom:1px solid #e5e7eb}
    .order-form__table th{text-align:left;font-weight:600}
    .order-form__table .text-right{text-align:right}
    .order-form__table input[type="number"]{width:6ch;text-align:right}
    .order-form__footer{display:flex;gap:1rem;align-items:center;justify-content:flex-start;margin-top:1rem}
    .order-form__add.btn{padding:.65rem 1rem;border-radius:.5rem;border:1px solid #111;cursor:pointer;background:#111;color:#fff}
    .order-form__add.btn[disabled]{opacity:.5;cursor:not-allowed}
    .order-form__notice{min-height:1.5rem}
  </style>

  <script>
  (function() {
    const rows = document.querySelectorAll('.order-row');
    const notice = document.querySelector('.order-form__notice');
    const addBtn = document.querySelector('.order-form__add');

    const moneyFormat = {{ shop.money_format | strip_html | json }};

  function formatMoneyCents(cents) {
    const amount = (cents / 100).toFixed(2);
    // Handle both "{{ amount }}" and "{{amount}}" variants just in case
    return moneyFormat
      .replace('{{ amount }}', amount)
      .replace('{{amount}}', amount);
  }

    function toCents(num) {
      // Accept string/number; assume store currency uses dot decimal
      const n = Number(num);
      return Math.round(n * 100);
    }

    function recalcRow(tr) {
      const unitsPerBox = Number(tr.dataset.unitsPerBox || 0);
      const cost        = Number(tr.dataset.cost || 0); // major units
      const rsp         = Number(tr.dataset.rsp || 0);  // major units
      const boxesInput  = tr.querySelector('.boxes-input');
      const boxes       = Math.max(0, Math.floor(Number(boxesInput.value || 0)));

      const totalUnits = boxes * unitsPerBox;
      const subTotal   = totalUnits * cost; // major units
      const marginPct  = (rsp > 0) ? ((rsp - cost) / rsp) * 100 : 0;

      tr.querySelector('.total-units').textContent = totalUnits.toString();
      tr.querySelector('.sub-total').textContent   = formatMoneyCents(toCents(subTotal));
      tr.querySelector('.margin-pct').textContent  = (isFinite(marginPct) ? marginPct.toFixed(0) : 0) + '%';
    }

    rows.forEach(tr => {
      const input = tr.querySelector('.boxes-input');
      ['change', 'input'].forEach(evt => input.addEventListener(evt, () => recalcRow(tr)));
      recalcRow(tr);
    });

    async function addSelectedToCart() {
      notice.textContent = '';
      addBtn.disabled = true;
      try {
        // Build items array: {id, quantity}
        const items = [];
        document.querySelectorAll('.order-row').forEach(tr => {
          const boxes = Math.max(0, Math.floor(Number(tr.querySelector('.boxes-input').value || 0)));
          if (!boxes) return;
          const unitsPerBox = Number(tr.dataset.unitsPerBox || 0);
          const totalUnits = boxes * unitsPerBox;
          if (totalUnits > 0) {
            items.push({ id: Number(tr.dataset.variantId), quantity: totalUnits });
          }
        });

        if (items.length === 0) {
          notice.textContent = 'No lines selected.';
          addBtn.disabled = false;
          return;
        }

        // Shopify supports adding many line items in one request.
        const res = await fetch('/cart/add.js', {
          method: 'POST',
          headers: { 'Content-Type': 'application/json', 'Accept': 'application/json' },
          body: JSON.stringify({ items })
        });

        if (!res.ok) {
          const err = await res.json().catch(() => ({}));
          throw new Error(err.description || 'Add to cart failed.');
        }

        notice.textContent = 'Added to cart.';
        // Optional: update a cart drawer or redirect to /cart
        // window.location.href = '/cart';
      } catch (e) {
        console.error(e);
        notice.textContent = e.message || 'Something went wrong.';
      } finally {
        addBtn.disabled = false;
      }
    }

    addBtn?.addEventListener('click', addSelectedToCart);
  })();
  </script>

  {% schema %}
  {
    "name": "Order form",
    "settings": [
      { "type": "text", "id": "heading", "label": "Heading", "default": "Order Form" }
    ],
    "blocks": [
      {
        "type": "collection",
        "name": "Collection",
        "settings": [
          { "type": "collection", "id": "collection", "label": "Collection" }
        ]
      }
    ],
    "max_blocks": 10,
    "presets": [{ "name": "Order form" }]
  }
  {% endschema %}
</section>
