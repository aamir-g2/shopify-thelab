{% comment %}
Order Form Section
- Lists products from a chosen collection
- Lets user enter # of boxes
- Calculates total units & subtotal (based on ex-VAT price)
- Submits an order request via Shopify's native contact form (includes CAPTCHA)
- Dynamically filters to Wholesale variants using SKU prefix resolved from:
    customer tag -> SKU prefix mapping blocks
  Fallback when not logged in or no tag matched uses a default prefix.
  e.g. WS-A_12345 -> base SKU=12345
{% endcomment %}

<section id="order-form-{{ section.id }}" class="order-form" style="--of-pad-block: {{ section.settings.pad_block }}px;">
  <div class="page-width order-form__inner">
    {% if section.settings.heading != blank %}
      <h2 class="order-form__heading">{{ section.settings.heading }}</h2>
    {% endif %}

    {%- comment -%} Resolve wholesale SKU prefix from the logged-in customer's tags via block mappings {%- endcomment -%}
    {% assign ws_prefix = '' %}
    {% assign ws_prefix_len = 0 %}
    {% assign resolved_group_label = '' %}

    {% if customer %}
      {% assign cust_tags = customer.tags %}
    {% else %}
      {% assign cust_tags = '' %}
    {% endif %}

    {% if section.blocks.size > 0 %}
      {% for block in section.blocks %}
        {% if block.type == 'group_map' %}
          {% assign tag = block.settings.customer_tag | strip %}
          {% assign prefix = block.settings.sku_prefix | strip %}
          {% assign label = block.settings.display_label | strip %}
          {% if tag != blank and prefix != blank and customer %}
            {%- comment -%} Shopify tags are space-separated strings; 'contains' is acceptable for tag checks {%- endcomment -%}
            {% if cust_tags contains tag %}
              {% assign ws_prefix = prefix %}
              {% assign ws_prefix_len = ws_prefix | size %}
              {% assign resolved_group_label = label | default: tag %}
              {% break %}
            {% endif %}
          {% endif %}
        {% endif %}
      {% endfor %}
    {% endif %}

    {%- comment -%} Fallback when no match or not logged in {%- endcomment -%}
    {% if ws_prefix == '' %}
      {% assign ws_prefix = section.settings.default_sku_prefix | default: 'WS-A_' %}
      {% assign ws_prefix_len = ws_prefix | size %}
      {% if resolved_group_label == '' %}
        {% assign resolved_group_label = section.settings.default_label | default: 'Default' %}
      {% endif %}
    {% endif %}

    {% if section.settings.show_active_group and resolved_group_label != blank %}
      <p class="of-active-group" style="opacity:.75;margin:.25rem 0 1rem 0;">
        Showing prices for: <strong>{{ resolved_group_label }}</strong>
      </p>
    {% endif %}

    {% assign order_collection = collections[section.settings.collection] %}

    {% if order_collection and order_collection.products_count > 0 %}
      <div class="order-form__table-wrap">
        <table class="order-form__table">
          <thead>
            <tr>
              <th class="of-left">Product</th>
              <th>Units/box</th>
              <th>RSP</th>
              <th>Price (ex VAT)</th>
              <th>Price (incl. VAT)</th>
              <th># Boxes</th>
              <th>Total units</th>
              <th>Subtotal</th>
            </tr>
          </thead>
          <tbody>
            {% for product in order_collection.products %}
              {% for variant in product.variants %}

                {%- comment -%} Filter: only Wholesale variants in resolved group (by SKU prefix) {%- endcomment -%}
                {% assign sku_raw = variant.sku | default: '' %}
                {% if sku_raw == '' %}
                  {% continue %}
                {% endif %}

                {% assign prefix_slice = sku_raw | slice: 0, ws_prefix_len %}
                {% if prefix_slice != ws_prefix %}
                  {% continue %}
                {% endif %}

                {%- comment -%} Strip the prefix for display {%- endcomment -%}
                {% assign base_sku = sku_raw | remove_first: ws_prefix %}

                {% assign units_per_box = variant.metafields.packaging.units_per_box.value 
                  | default: product.metafields.packaging.units_per_box.value 
                  | default: 1 %}

                {%- comment -%} cost & rsp normalized to cents {%- endcomment -%}
                {% if variant.metafields.pricing.cost_price.value %}
                  {% assign cost_price_cents = variant.metafields.pricing.cost_price.value | round %}
                {% elsif product.metafields.pricing.cost_price.value %}
                  {% assign cost_price_cents = product.metafields.pricing.cost_price.value | round %}
                {% else %}
                  {% assign cost_price_cents = 0 %}
                {% endif %}

                {% if variant.metafields.pricing.rsp.value %}
                  {% assign rsp_cents = variant.metafields.pricing.rsp.value | times: 100 | round %}
                {% elsif product.metafields.pricing.rsp.value %}
                  {% assign rsp_cents = product.metafields.pricing.rsp.value | times: 100 | round %}
                {% else %}
                  {% assign rsp_cents = variant.price %}
                {% endif %}

                {%- comment -%}
                  Compute ex/incl VAT cents using 15% VAT with integer-safe math.
                  If your shop prices include tax, ex VAT = rsp * 100 / 115, incl VAT = rsp
                  If not, ex VAT = rsp, incl VAT = rsp * 115 / 100
                {%- endcomment -%}
                {% if shop.taxes_included %}
                  {% assign rsp_ex_cents = rsp_cents | times: 100 | divided_by: 115 %}
                  {% assign rsp_inc_cents = rsp_cents %}
                {% else %}
                  {% assign rsp_ex_cents = rsp_cents %}
                  {% assign rsp_inc_cents = rsp_cents | times: 115 | divided_by: 100 %}
                {% endif %}

                <tr class="order-row"
                  data-variant-id={{ variant.id | json }}
                  data-units-per-box="{{ units_per_box }}"
                  data-cost-price="{{ cost_price_cents }}"
                  data-unit-price-cents="{{ rsp_ex_cents }}"
                  data-rsp="{{ rsp_cents | divided_by: 100.0 }}">
                  <td class="of-left">
                    <div class="of-product">
                      {% if product.featured_image %}
                        <img src="{{ product.featured_image | image_url: width: 96 }}" alt="{{ product.title | escape }}" width="48" height="48" loading="lazy">
                      {% endif %}
                      <div class="of-product-meta">
                        <a href="{{ product.url }}" class="of-link of-name">{{ product.title }}</a>
                        <div class="of-sku">
                          {% if base_sku != blank %}
                            SKU: {{ base_sku }}
                          {% else %}
                            <span class="of-sku--muted">No SKU</span>
                          {% endif %}
                        </div>
                      </div>
                    </div>
                  </td>

                  <td class="units-per-box">{{ units_per_box }}</td>
                  <td class="price-rsp">{{ rsp_cents | money }}</td>
                  <td class="price-ex-vat">{{ rsp_ex_cents | money }}</td>
                  <td class="price-inc-vat">{{ rsp_inc_cents | money }}</td>

                  <td>
                    <input class="box-input" type="number" min="0" step="1" inputmode="numeric" aria-label="Boxes for {{ product.title }}" />
                  </td>
                  <td class="total-units">0</td>
                  <td class="subtotal">{{ 0 | money }}</td>
                </tr>
              {% endfor %}
            {% endfor %}
          </tbody>

          <tfoot>
            <tr>
              <th class="of-left" colspan="6">Order total:</th>
              <th id="of-total-units">0</th>
              <th id="of-grand-subtotal">{{ 0 | money }}</th>
            </tr>
          </tfoot>
        </table>
      </div>

      <div class="order-form__actions">
        <button type="button" class="of-btn of-btn--primary" id="of-request-quote">Submit order request</button>
        <button type="button" class="of-btn of-btn--ghost" id="of-clear">Clear</button>
      </div>

    {% else %}
      <p class="of-empty">No products found. Choose a collection with active products.</p>
    {% endif %}
  </div>

  <style>
    /* --- layout --- */
    #order-form-{{ section.id }} { padding-block: var(--of-pad-block, 40px); }
    .order-form__inner { max-width: var(--page-width, 1200px); margin-inline: auto; }
    .order-form__heading { margin: 0 0 1rem 0; font-size: clamp(1.25rem, 1rem + 1vw, 1.75rem); }

    /* --- table --- */
    .order-form__table-wrap { overflow-x: auto; }
    .order-form__table { width: 100%; border-collapse: collapse; font-size: .95rem; }
    .order-form__table thead th {
      position: sticky; top: 0;
      background: var(--color-background, #fff);
      z-index: 1;
      text-align: center; padding: .8rem .75rem; border-bottom: 1px solid rgba(0,0,0,.08);
      font-weight: 600; letter-spacing: .02em;
    }
    .order-form__table th.of-left, .order-form__table td.of-left { text-align: left; }
    .order-form__table tbody td { padding: .75rem .75rem; text-align: center; border-bottom: 1px solid rgba(0,0,0,.06); }
    .order-form__table tbody tr:nth-child(odd) { background: color-mix(in oklab, currentColor 3%, transparent); }
    .order-form__table tfoot th { padding: .9rem .75rem; text-align: right; border-top: 2px solid rgba(0,0,0,.12); }
    .order-form__table tfoot th#of-total-units,
    .order-form__table tfoot th#of-grand-subtotal { text-align: center; }

    /* product cell enhancements */
    .of-product { display: inline-flex; align-items: center; gap: .75rem; }
    .of-product img { width: 48px; height: 48px; object-fit: cover; border-radius: 8px; flex: 0 0 48px; }
    .of-product-meta { display: grid; line-height: 1.15; text-align: left; }
    .of-name { font-weight: 700; text-decoration: none; border-bottom: 1px solid transparent; }
    .of-name:hover { border-color: currentColor; }
    .of-sku { font-size: .85em; opacity: .7; }
    .of-sku--muted { opacity: .5; }

    /* keep numeric columns tidy */
    .price-rsp, .price-ex-vat, .price-inc-vat, .units-per-box, .total-units, .subtotal { white-space: nowrap; }

    /* inputs */
    .box-input {
      width: 5.25rem; padding: .45rem .5rem; border-radius: 8px;
      border: 1px solid rgba(0,0,0,.15); background: var(--color-background, #fff);
    }

    /* buttons */
    .order-form__actions { margin-top: 1rem; display: flex; gap: .75rem; }
    .of-btn {
      display: inline-flex; align-items: center; justify-content: center;
      padding: .65rem 1rem; border-radius: 999px; font-weight: 600;
      border: 1px solid transparent; cursor: pointer;
      transition: transform .06s ease, box-shadow .2s ease, background .2s ease;
    }
    .of-btn:active { transform: translateY(1px); }
    .of-btn--primary {
      background: var(--color-button, #111); color: var(--color-button-text, #fff);
      box-shadow: 0 2px 8px rgba(0,0,0,.08);
    }
    .of-btn--primary:hover { filter: brightness(1.05); }
    .of-btn--ghost {
      background: transparent; color: currentColor;
      border-color: rgba(0,0,0,.2);
    }
    .of-btn--ghost:hover { background: color-mix(in oklab, currentColor 8%, transparent); }
    .of-btn:disabled { opacity: .5; cursor: not-allowed; }
    .of-empty { opacity: .7; }

    /* modal */
    .of-modal[hidden]{display:none}
    .of-modal{position:fixed;inset:0;z-index:9999}
    .of-modal__backdrop{position:absolute;inset:0;background:rgba(0,0,0,.4)}
    .of-modal__dialog{
      position:relative; margin:6vh auto 0; max-width:720px; background:#fff; border-radius:16px;
      padding:1.25rem; box-shadow:0 10px 30px rgba(0,0,0,.2)
    }
    .of-modal__title{margin:0 0 .75rem 0}
    .of-modal__close{position:absolute; right:.5rem; top:.5rem; background:transparent; border:0; font-size:1.5rem; cursor:pointer}
    .of-grid{display:grid; grid-template-columns:repeat(2,minmax(0,1fr)); gap:.75rem}
    .of-field{display:flex; flex-direction:column; gap:.35rem}
    .of-field--full{grid-column:1 / -1}
    .of-field input,.of-field textarea{
      border:1px solid rgba(0,0,0,.15); border-radius:8px; padding:.55rem .6rem
    }
    .of-modal__actions{display:flex; gap:.5rem; margin-top:.5rem}
    .of-help{opacity:.7; font-size:.9em; margin-top:.5rem}
    @media (max-width:720px){ .of-grid{grid-template-columns:1fr} }
    .of-toast{
      position:fixed; left:50%; transform:translateX(-50%);
      bottom:16px; background:#111;color:#fff; padding:.6rem .9rem; border-radius:999px;
      font-weight:600; box-shadow:0 6px 20px rgba(0,0,0,.25); z-index:10000
    }
  </style>

<script>
  document.addEventListener('DOMContentLoaded', function() {
    const section = document.getElementById('order-form-{{ section.id }}');
    if (!section) return;

    // Money (ZAR)
    function formatMoney(amount){
      try { return new Intl.NumberFormat('en-ZA', {style:'currency', currency:'ZAR'}).format(Number(amount||0)); }
      catch { return 'R ' + (Number(amount||0)).toFixed(2); }
    }

    // --- table calc (ex-VAT totals, as discussed) ---
    const rows = Array.from(section.querySelectorAll('.order-row'));
    const requestBtn = section.querySelector('#of-request-quote');
    const clearBtn = section.querySelector('#of-clear');
    const totalUnitsCell = section.querySelector('#of-total-units');
    const grandSubtotalCell = section.querySelector('#of-grand-subtotal');

    function recalcRow(row){
      const boxes = Number(row.querySelector('.box-input').value || 0);
      const unitsPerBox = Number(row.dataset.unitsPerBox || 1);
      const unitPriceCents = Number(row.dataset.unitPriceCents || 0); // ex-VAT cents
      const totalUnits = boxes * unitsPerBox;
      const subtotal = (totalUnits * unitPriceCents) / 100;
      row.querySelector('.total-units').textContent = totalUnits;
      row.querySelector('.subtotal').textContent = formatMoney(subtotal);
      return { totalUnits, subtotal };
    }

    function recalcTotals(){
      let totalUnits = 0, grandSubtotal = 0;
      rows.forEach(row => {
        const { totalUnits: u, subtotal: s } = recalcRow(row);
        totalUnits += u; grandSubtotal += s;
      });
      totalUnitsCell.textContent = totalUnits;
      grandSubtotalCell.textContent = formatMoney(grandSubtotal);
      requestBtn.disabled = totalUnits === 0;
    }

    rows.forEach(row => row.querySelector('.box-input').addEventListener('input', recalcTotals, {passive:true}));
    clearBtn?.addEventListener('click', () => { rows.forEach(r => r.querySelector('.box-input').value=''); recalcTotals(); });

    // --- modal + submit to App Proxy ---
    const modal = document.getElementById('of-modal');
    const form = document.getElementById('of-request-form');
    const modalClose = modal.querySelector('.of-modal__close');
    const modalCancel = modal.querySelector('.of-cancel');
    function openModal(){ modal.removeAttribute('hidden'); }
    function closeModal(){ modal.setAttribute('hidden',''); }
    modalClose.addEventListener('click', closeModal);
    modalCancel.addEventListener('click', closeModal);
    modal.addEventListener('click', (e)=>{ if(e.target.classList.contains('of-modal__backdrop')) closeModal(); });

    function toast(msg, ok=true){
      const el = document.createElement('div');
      el.className = 'of-toast';
      el.style.background = ok ? '#111' : '#b00020';
      el.textContent = msg;
      document.body.appendChild(el);
      setTimeout(()=>{ el.remove(); }, 3500);
    }

    function collectItems(){
      const items = [];
      rows.forEach(row => {
        const boxes = Number(row.querySelector('.box-input').value || 0);
        if (boxes > 0) {
          const unitsPerBox = Number(row.dataset.unitsPerBox || 1);
          const variantId = row.dataset.variantId;
          const qty = boxes * unitsPerBox;
          const skuCell = row.querySelector('.of-sku');
          const title = row.querySelector('.of-name')?.textContent?.trim() || '';
          const sku = skuCell ? skuCell.textContent.replace(/^SKU:\s*/,'').trim() : '';
          items.push({ variant_id: variantId, quantity: qty, title, sku });
        }
      });
      return items;
    }

    requestBtn?.addEventListener('click', () => {
      if (requestBtn.disabled) return;
      const items = collectItems();
      if (!items.length) { toast('Add at least one box.', false); return; }
      openModal();
    });

    form?.addEventListener('submit', async (e) => {
      e.preventDefault();
      const items = collectItems();
      if (!items.length) { toast('No items selected.', false); return; }

      const fd = new FormData(form);
      const payload = {
        items,
        totals: {
          total_units: Number(totalUnitsCell.textContent || 0),
          subtotal_ex_vat: grandSubtotalCell.textContent // display only
        },
        customer_context: {
          id: {{ customer.id | default: 'null' }},
          email: fd.get('email'),
          name: fd.get('name'),
          company: fd.get('company'),
          phone: fd.get('phone')
        },
        notes: fd.get('notes') || '',
        section_id: '{{ section.id }}',
        source_url: window.location.href
      };

      // Disable button to prevent double submit
      const submitBtn = form.querySelector('#of-submit');
      submitBtn.disabled = true;

      try {
        // App Proxy endpoint (set this up in your custom app)
        // Point to your deployed function (Direct mode)
        const ORDER_ENDPOINT = 'https://shopify-draft-order-ruddy.vercel.app/api/order-request';

        const res = await fetch(ORDER_ENDPOINT, {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
            'Accept': 'application/json',
            // Required by your server guard in Direct mode:
            'X-Shop-Domain': '{{ shop.permanent_domain }}'
          },
          body: JSON.stringify(payload)
        });


        if (!res.ok) {
          const err = await res.json().catch(()=>({}));
          throw new Error(err.message || 'Order request failed');
        }

        const data = await res.json();
        closeModal();
        // Clear UI
        rows.forEach(r => r.querySelector('.box-input').value='');
        recalcTotals();

        const ref = data?.draft_order?.name || data?.reference || 'Request received';
        toast(`Order request submitted • ${ref}`);
      } catch (err) {
        console.error(err);
        toast(err.message || 'Could not submit order request', false);
      } finally {
        submitBtn.disabled = false;
      }
    });

    recalcTotals();
  });
  </script>


  {%- comment -%} Prefill helpers for the modal {%- endcomment -%}
  {% assign _full_name = '' %}
  {% assign _email = '' %}
  {% assign _company = '' %}
  {% assign _phone = '' %}

  {% if customer %}
    {% assign _full_name = customer.first_name | append: ' ' | append: customer.last_name | strip %}
    {% assign _email = customer.email | default: '' %}
    {% assign _company = customer.default_address.company | default: '' %}
    {% assign _phone = customer.phone | default: customer.default_address.phone | default: '' %}
  {% endif %}

  <!-- Order Request Modal -->
  <div class="of-modal" id="of-modal" hidden>
    <div class="of-modal__backdrop"></div>
    <div class="of-modal__dialog" role="dialog" aria-modal="true" aria-labelledby="of-modal-title">
      <button class="of-modal__close" type="button" aria-label="Close">&times;</button>
      <h3 id="of-modal-title" class="of-modal__title">Submit order request</h3>
      <form id="of-request-form" novalidate>
        <div class="of-grid">
          <label class="of-field">
            <span>Name</span>
            <input type="text" name="name" required value="{{ _full_name | escape }}">
          </label>
          <label class="of-field">
            <span>Email</span>
            <input type="email" name="email" required value="{{ _email | escape }}">
          </label>
          <label class="of-field">
            <span>Company (optional)</span>
            <input type="text" name="company" value="{{ _company | escape }}">
          </label>
          <label class="of-field">
            <span>Phone (optional)</span>
            <input type="tel" name="phone" value="{{ _phone | escape }}">
          </label>
          <label class="of-field of-field--full">
            <span>Notes (optional)</span>
            <textarea name="notes" rows="3" placeholder="Any delivery notes, needed-by dates, PO numbers, etc."></textarea>
          </label>
        </div>
        <div class="of-modal__actions">
          <button type="submit" class="of-btn of-btn--primary" id="of-submit">Send request</button>
          <button type="button" class="of-btn of-btn--ghost of-cancel">Cancel</button>
        </div>
        <p class="of-help">Thanks! Our team will review your request and reply by email.</p>
      </form>
    </div>
  </div>

  <!-- Hidden native Shopify contact form so CAPTCHA is included -->
  <style>
    .of-hidden-contact {
      position:absolute; left:-9999px; top:auto; width:1px; height:1px; overflow:hidden;
    }
  </style>
  <div class="of-hidden-contact" aria-hidden="true">
    {% form 'contact', id: 'of-contact-form' %}
      <input type="hidden" name="contact[name]"  id="of-contact-name">
      <input type="hidden" name="contact[email]" id="of-contact-email">
      <textarea name="contact[body]" id="of-contact-body"></textarea>
      <!-- real submit button so requestSubmit can target it -->
      <button type="submit" id="of-contact-submit">Send</button>
    {% endform %}
  </div>

</section>

{% schema %}
{
  "name": "Order form",
  "settings": [
    { "type": "text", "id": "heading", "label": "Heading", "default": "Order Form" },
    { "type": "collection", "id": "collection", "label": "Collection to show" },
    {
      "type": "text",
      "id": "default_sku_prefix",
      "label": "Default SKU prefix (fallback)",
      "default": "WS-A_",
      "info": "Used when no customer tag matches (or customer not logged in). Example: WS-A_"
    },
    {
      "type": "text",
      "id": "default_label",
      "label": "Default group label (fallback)",
      "default": "Default",
      "info": "Shown if you enable the 'Show active group' toggle."
    },
    {
      "type": "checkbox",
      "id": "show_active_group",
      "label": "Show active group label on page",
      "default": true
    },
    { "type": "range", "id": "pad_block", "min": 0, "max": 80, "step": 4, "unit": "px", "label": "Top/bottom padding", "default": 40 }
  ],
  "blocks": [
    {
      "type": "group_map",
      "name": "Pricing group mapping",
      "limit": 20,
      "settings": [
        {
          "type": "text",
          "id": "customer_tag",
          "label": "Customer tag",
          "info": "Exact tag that identifies this pricing group (e.g. wholesale-A)."
        },
        {
          "type": "text",
          "id": "sku_prefix",
          "label": "SKU prefix for this group",
          "info": "Variants for this group must start with this prefix (e.g. WS-A_)."
        },
        {
          "type": "text",
          "id": "display_label",
          "label": "Display label (optional)",
          "info": "Human-friendly name to show (e.g. Group A). Falls back to the tag value."
        }
      ]
    }
  ],
  "presets": [{ "name": "Order form" }]
}
{% endschema %}
